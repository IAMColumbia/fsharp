* FSharp notes

** Basics
*** Variables, Functions.. both?
F# is a functional language. Its often joked that _everything_ is an object in c#. IF that joke was made about f# it would be "everything is a function". So when we go to define a variable, which is commonplace in every language, it gets a little bit extra spicy in F#. Variables, under the hood, are functions. Below is the f# equivalent of \(f() = 10\)
#+BEGIN_SRC fsharp
let x = 10
#+END_SRC
Calling function 'x' returns 10. `x` is immutable, meaning it will always return 10 and cannot be changed. This makes sense if we think of it as a function, functions cannot be reassigned and you cant have 2 with the same signature. Comparing variables gets a little weird as well since we use the single '=' for both assignment and value comparison

#+BEGIN_SRC fsharp
let x = 10
println x = 10 // prints true
#+END_SRC

If we need a variable that can be changed, which is rarer than you think, you have to use the "mutable" keyword
#+BEGIN_SRC fsharp
let mutable x = 10
x <- x + 1
#+END_SRC
*** Functions
Defining a function in F# is the same as defining a variable, since as discussed above, they are essentially the same thing.
#+BEGIN_SRC fsharp
let square x = x * x
#+END_SRC

You will find function definitions are very close to your math function notation \(f(x) = x*x\). The biggest thing to get used to in F# is type inference. You almost never have to specify a type for a function. The biggest reason to use a type directive in F# is to use an object type (C# Type) so you can access the members of that object
#+BEGIN_SRC fsharp
let len (s : string) = s.length()
#+END_SRC

Using parentheses in this case is fairly straight forward. But it is generally used to write a function that takes in a [[wikipedia:Tuple][tuple]]

#+BEGIN_SRC fsharp
let add (a, b) = a + b //function that takes in the tuple (a`, b`)
let add a b = a + b // function that takes 2 arguments: a and b
#+END_SRC


Functions can also be nested to do sub calculations
#+BEGIN_SRC fsharp
let evens list =
    let even x = x % 2 = 0

    List.filter list even
#+END_SRC

`List.filter` is a system function to filter a list and it takes 2 arguments: a list and a function that returns a boolean, in this case \(int\mapsto boolean\). Passing a function as an argument (or returns a function as the return type) is known as a "higher order function" and is a core principle of functional programming
**** Partial Application
Partial application is a cool trick to essentially "bake in" a function parameter. Instead of default parameters that we get in c-type languages we can use partial application to have constant arguments to functions to make some operations cleaner

#+BEGIN_SRC fsharp
let add x y = x + y

let add2 = add 2

let x = add2 2 //x will be 4
#+END_SRC

in a real world example
#+BEGIN_SRC fsharp
let log serverity message = printfn "Severity: %s Message: %s"

let logError = log "Error"

logError "Something Bad Happened"

#+END_SRC

**** Composition
Function composition is a mathematical concept of combining 2 functions into a third function \[f\circ g(x) = f(g(x))\] \[h = g\circ f\] \[h(x) = f(g(x))\]

F# uses the ">>" operator to compose functions and combine them into a new function. Take the following example where we have 2 partial applications of the add function and we compose them together into a third function. Composition is a valuable tool to at least be aware of because it happens all the time under the hood.

#+BEGIN_SRC fsharp
let add1 = add 1
let add2 = add 2
let add3 = add1 >> add2
let c = add3 7 // c is 3 + 7
#+END_SRC


**** Currying
Currying and partial application seem to do the same thing but they are slightly different. Currying is taking a function that takes many arguments and turning it into many functions that take 1 argument and then using composition to calculate the final value. Partial application you can choose to use as many or as few arguments for a function wheras currying always uses unary (functions that take one argument) functions.

Our add function \(f(a, b) = a + b\) can be written in it's curried form as \(a\mapsto b\mapsto a + b\). Currying isnt something we do every day but its essential to know what is happening under the hood as we write more and more complex applications.
**** Pipes
** Types
F# supports a much richer type system than most languages.
*** Tuples
Tuples are ad-hoc data structures of any number of types
#+BEGIN_SRC fsharp
let pair = (10, 10) //declaring a tuple is just values wrapped in parentheses
let (x, y) = pair //using pattern matching we can "deconstruct" a tuple into individual values
let foo = (1, "foo", 12.5) // tuples can mix types
#+END_SRC
*** Records
Records are, essentially, named tuples. Each value in a record has a label that can be used to access the corresponding value
#+BEGIN_SRC fsharp
type Point = { X: float; Y: float; Z: float; }
let p = { X = 1.0; Y = 2.0; Z = 3.0; } //record expression syntax
#+END_SRC
*** Discriminated Unions/Algebraic Types
Discriminated unions are special types that can be represented by a different type based on context
#+BEGIN_SRC fsharp
type Shape =
    | Rectangle of width : float * length : float
    | Circle of radius : float
    | Prism of width : float * float * height : float

let rect = Rectangle(length = 1.3, width = 10.0)
let circ = Circle (1.0)
let prism = Prism(5., 2.0, height = 3.0)
#+END_SRC

The most used discriminated union is the `Option` type. To cleanly handle a variable that might have a value F# uses the Option type.
#+BEGIN_SRC fsharp
let printValue opt =
    match opt with
    | Some x -> printfn "%A" x
    | None -> printfn "No value."
#+END_SRC

wrapping a value in an option type and using pattern matching means that you can cleanly handle nulls vs other languages
